{"ast":null,"code":"import{io}from'socket.io-client';class WebSocketService{constructor(){this.socket=null;this.listeners=new Map();}connect(){var _this$socket;if((_this$socket=this.socket)!==null&&_this$socket!==void 0&&_this$socket.connected){return;}const wsUrl=process.env.REACT_APP_WS_URL||'ws://localhost:8080/ws';// For now, we'll use a simple WebSocket connection since we're using Gorilla WebSocket\nthis.socket=io(wsUrl.replace('ws://','http://').replace('wss://','https://'),{transports:['websocket'],upgrade:false});this.socket.on('connect',()=>{console.log('WebSocket connected');this.emit('connected',null);});this.socket.on('disconnect',()=>{console.log('WebSocket disconnected');this.emit('disconnected',null);});this.socket.on('message',message=>{console.log('WebSocket message received:',message);this.emit(message.type,message.data);});this.socket.on('error',error=>{console.error('WebSocket error:',error);this.emit('error',error);});}disconnect(){if(this.socket){this.socket.disconnect();this.socket=null;}}send(type,data){var _this$socket2;if((_this$socket2=this.socket)!==null&&_this$socket2!==void 0&&_this$socket2.connected){this.socket.emit('message',{type,data,time:new Date().toISOString()});}}subscribe(event,callback){if(!this.listeners.has(event)){this.listeners.set(event,[]);}this.listeners.get(event).push(callback);// Send subscription message to server\nthis.send('subscribe',event);}unsubscribe(event,callback){const eventListeners=this.listeners.get(event);if(eventListeners){const index=eventListeners.indexOf(callback);if(index>-1){eventListeners.splice(index,1);}}}emit(event,data){const eventListeners=this.listeners.get(event);if(eventListeners){eventListeners.forEach(callback=>callback(data));}}// Price update subscriptions\nsubscribeToPriceUpdates(itemId,callback){this.subscribe(\"price_update_\".concat(itemId),callback);}subscribeToArbitrageOpportunities(callback){this.subscribe('arbitrage_opportunities',callback);}subscribeToTradeUpdates(callback){this.subscribe('trade_updates',callback);}subscribeToMarketTrends(callback){this.subscribe('market_trends',callback);}isConnected(){var _this$socket3;return((_this$socket3=this.socket)===null||_this$socket3===void 0?void 0:_this$socket3.connected)||false;}}export const websocketService=new WebSocketService();","map":{"version":3,"names":["io","WebSocketService","constructor","socket","listeners","Map","connect","_this$socket","connected","wsUrl","process","env","REACT_APP_WS_URL","replace","transports","upgrade","on","console","log","emit","message","type","data","error","disconnect","send","_this$socket2","time","Date","toISOString","subscribe","event","callback","has","set","get","push","unsubscribe","eventListeners","index","indexOf","splice","forEach","subscribeToPriceUpdates","itemId","concat","subscribeToArbitrageOpportunities","subscribeToTradeUpdates","subscribeToMarketTrends","isConnected","_this$socket3","websocketService"],"sources":["/Users/user/Downloads/csgoAuto/web/src/services/websocketService.ts"],"sourcesContent":["import { io, Socket } from 'socket.io-client';\n\nexport interface WebSocketMessage {\n  type: string;\n  data: any;\n  time: string;\n}\n\nclass WebSocketService {\n  private socket: Socket | null = null;\n  private listeners: Map<string, Array<(data: any) => void>> = new Map();\n\n  connect(): void {\n    if (this.socket?.connected) {\n      return;\n    }\n\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://localhost:8080/ws';\n    \n    // For now, we'll use a simple WebSocket connection since we're using Gorilla WebSocket\n    this.socket = io(wsUrl.replace('ws://', 'http://').replace('wss://', 'https://'), {\n      transports: ['websocket'],\n      upgrade: false\n    });\n\n    this.socket.on('connect', () => {\n      console.log('WebSocket connected');\n      this.emit('connected', null);\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('WebSocket disconnected');\n      this.emit('disconnected', null);\n    });\n\n    this.socket.on('message', (message: WebSocketMessage) => {\n      console.log('WebSocket message received:', message);\n      this.emit(message.type, message.data);\n    });\n\n    this.socket.on('error', (error: any) => {\n      console.error('WebSocket error:', error);\n      this.emit('error', error);\n    });\n  }\n\n  disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  send(type: string, data: any): void {\n    if (this.socket?.connected) {\n      this.socket.emit('message', {\n        type,\n        data,\n        time: new Date().toISOString()\n      });\n    }\n  }\n\n  subscribe(event: string, callback: (data: any) => void): void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, []);\n    }\n    this.listeners.get(event)!.push(callback);\n\n    // Send subscription message to server\n    this.send('subscribe', event);\n  }\n\n  unsubscribe(event: string, callback: (data: any) => void): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      const index = eventListeners.indexOf(callback);\n      if (index > -1) {\n        eventListeners.splice(index, 1);\n      }\n    }\n  }\n\n  private emit(event: string, data: any): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.forEach(callback => callback(data));\n    }\n  }\n\n  // Price update subscriptions\n  subscribeToPriceUpdates(itemId: number, callback: (data: any) => void): void {\n    this.subscribe(`price_update_${itemId}`, callback);\n  }\n\n  subscribeToArbitrageOpportunities(callback: (data: any) => void): void {\n    this.subscribe('arbitrage_opportunities', callback);\n  }\n\n  subscribeToTradeUpdates(callback: (data: any) => void): void {\n    this.subscribe('trade_updates', callback);\n  }\n\n  subscribeToMarketTrends(callback: (data: any) => void): void {\n    this.subscribe('market_trends', callback);\n  }\n\n  isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n}\n\nexport const websocketService = new WebSocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}